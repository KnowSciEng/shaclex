package es.weso.schema
import Explanation._
import es.weso.rdf.PrefixMap
import cats._
import data._
import es.weso.rdf.nodes.{ IRI, RDFNode }
import implicits._
import es.weso.shex.implicits.showShEx
import io.circe._
import io.circe.JsonObject._
import io.circe.syntax._
import cats.syntax.either._
import es.weso.json.DecoderUtils._

case class InfoNode(
  hasShapes: Seq[(SchemaLabel, Explanation)],
  hasNoShapes: Seq[(SchemaLabel, Explanation)],
  pm: PrefixMap) {

  def contains(label: SchemaLabel): Boolean = {
    hasShapes.map(_._1).contains(label)
  }

  override def toString: String = show

  def show: String = {
    val sb = new StringBuilder
    for ((s, e) <- hasShapes) {
      sb ++= ("+" + s.show + " " + e.str)
    }
    for ((s, e) <- hasNoShapes) {
      sb ++= ("-" + s.show + " " + e.str)
    }
    sb.toString
  }

  def conditionalAdd(cond: Boolean, obj: JsonObject, key: String, value: Json): JsonObject = {
    if (cond) obj.add(key, value)
    else obj
  }

  def toJson: Json = {
    val jsonPositive: Json = Json.fromJsonObject(
      JsonObject.fromFoldable(hasShapes.toList.map { case (label, e) => (label.show, Json.fromString(e.str)) }))
    val jsonNegative: Json = Json.fromJsonObject(
      JsonObject.fromFoldable(hasNoShapes.toList.map { case (label, e) => (label.show, Json.fromString(e.str)) }))
    Json.fromJsonObject {
      val obj = JsonObject.empty
      val pos = conditionalAdd(!hasShapes.isEmpty, obj, "hasShapes", jsonPositive)
      val neg = conditionalAdd(!hasNoShapes.isEmpty, pos, "hasNoShapes", jsonNegative)
      neg
    }
  }
}

object InfoNode {

  implicit val showInfoNode = new Show[InfoNode] {
    override def show(n: InfoNode): String = {
      n.show
    }
  }

  implicit val encodeInfoNode: Encoder[InfoNode] = new Encoder[InfoNode] {
    final def apply(i: InfoNode): Json = i.toJson
  }

  implicit val decodeInfoNode: Decoder[InfoNode] = new Decoder[InfoNode] {
    final def apply(c: HCursor): Decoder.Result[InfoNode] = for {
      hasShapes <- getPair(c.downField("hasShapes"))
      hasNoShapes <- getPair(c.downField("hasNoShapes"))
      // solutionMap <- decodeMap(c.downField("solution"))
    } yield InfoNode(
      hasShapes = hasShapes,
      hasNoShapes = hasNoShapes,
      PrefixMap.empty)
  }

  def getPair(c: ACursor): Decoder.Result[Seq[(SchemaLabel, Explanation)]] =
    if (c.keys.isDefined) {
      val fields: Either[DecodingFailure, Vector[String]] = c.keys.map(_.toVector).toRight(DecodingFailure(s"getPair: no fields for $c", c.history))
      for {
        fs <- fields
        rs <- fs.map(field => getSchemaLabelExplanation(field, c)).sequence
      } yield rs.toSeq
    } else {
      val result: Either[DecodingFailure, Seq[(SchemaLabel, Explanation)]] = Right(Seq())
      result
    }

  def getSchemaLabelExplanation(field: String, c: ACursor): Decoder.Result[(SchemaLabel, Explanation)] =
    throw new Exception("Unimplemented getSchemaLabelExplanation...")
  /*{
    for {
      e <- c.downField(field).as[String]
    } yield (SchemaLabel(field,pm), Explanation(e))
  } */

  implicit val rdfNodeKeyDecoder = new KeyDecoder[RDFNode] {
    override def apply(key: String): Option[RDFNode] = Some(IRI(key))
  }

  /*  def toHTML(pm: PrefixMap): String = {
      val sb = new StringBuilder
      sb ++= "<ul class=\"positiveShapes\">"
      for ((s,e) <- hasShapes) {
        sb ++= ("<li><span class=\"shape\"" + s.toHTML(pm) + "</span>" +
                "<span class=\"explanation\">" + e.toHTML(pm) + "</span></li>")
      }
      sb.append("</ul>")
      sb.append("<ul class=\"negativeShapes\">")
      for ((s,e) <- hasNoShapes) {
        sb ++= ("<li><span class=\"shape\"" + s.toHTML(pm) + "</span>" +
                "<span class=\"explanation\">" + e.toHTML(pm) + "</span></li>")
      }
      sb.append("</ul>")
      sb.toString
    } */

}
